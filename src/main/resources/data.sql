drop table if exists "springTestAppDB".questions cascade;

create table "springTestAppDB".questions (
    id              bigserial primary key,
    question        varchar(255),
    theme           varchar(50),
    explanation     text
);

drop table if exists "springTestAppDB".answers;
create table "springTestAppDB".answers (
    id              bigserial primary key,
    answer          varchar(255),
    question_id     bigint references "springTestAppDB".questions(id),
    correct_answer  boolean
);

insert into "springTestAppDB".questions (id, question, theme, explanation) values
(1, 'Which of the following are cross cutting concerns where Spring AOP can be useful?', 'AOP', 'There are many valid AOP use cases. Other use cases include: performance monitoring, statistics, transactions, caching'),
(2, 'Which of the following operators can be used to combine multiple pointcut expressions?', 'AOP','You can combine pointcut expressions by using &&, || and !. You can also refer to pointcut expressions by name' ),
(3, 'Which of the following are metrics provided by Spring Boot Actuator?', 'Boot Actuator', 'Some examples of metrics that can be found in a Spring Boot application are: 1. Response time of HTTP requests. 2. Number of active connections in a database connection pool. 3. Memory usage. 4. This can be for instance heap memory usage. 5. Garbage collection statistics.'),
(4, 'Which of the following are health indicators provided by Spring Boot Actuator by default?', 'Boot Actuator', 'DiskSpaceHealthIndicator - Verifies that available disk space is above a certain threshold. ElasticsearchHealthIndicator - Verifies the availability of an Elasticsearch cluster. ConnectionHealthIndicator and ApplicationHealthIndicator do not exist.'),
(5, 'Spring MVC Auto-configuration adds the following on top of Spring’s defaults.', 'Boot AutoConfig', 'The auto-configuration adds the following features on top of Spring’s defaults: Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans. Support for serving static resources, including support for WebJars. Automatic registration of Converter, GenericConverter, and Formatter beans. Support for HttpMessageConverters. Automatic registration of MessageCodesResolver. Static index.html support. Custom Favicon support. Automatic use of a ConfigurableWebBindingInitializer bean.'),
(6, 'In Spring Boot, what is the default type of ApplicationContext created if Spring MVC is not present?', 'Boot AutoConfig', 'A SpringApplication attempts to create the right type of ApplicationContext on your behalf. The algorithm used to determine a WebApplicationType is the following: If Spring MVC is present, an AnnotationConfigServletWebServerApplication Context is used If Spring MVC is not present and Spring WebFlux is present, an AnnotationConfigReactiveWebServerApplication Context is used Otherwise, AnnotationConfigApplicationContext is used'),
(7, 'What is the name of the default property configuration file in Spring Boot?', 'Boot Intro', 'The default configuration file is application.properties (or application.yml if YAML is used).'),
(8, 'Which of the following interfaces can be implemented for functionality which runs once per application startup?', 'Boot Intro', '“If you need to run some specific code once the SpringApplication has started, you can implement the ApplicationRunner or CommandLineRunner interfaces. Both interfaces work in the same way and offer a single run method, which is called just before SpringApplication.run() completes. The CommandLineRunner interfaces provides access to application arguments as a string array, whereas the ApplicationRunner uses the ApplicationArguments interface'),
(9, 'Which of the following dependencies are included in the spring-boot-starter-test starter?', 'Boot Testing', 'The spring-boot-starter-test starter adds the following test-scoped dependencies to the classpath: JUnit - Unit-testing framework. Spring Test and Spring Boot Test AssertJ - Fluent assertions for Java. Hamcrest - Framework for writing matchers that are both powerful and easy to read. Mockito - Mocking framework for Java. JSONassert - Tools for verifying JSON representation of data. JsonPath - A Java DSL for reading JSON documents.'),
(10, 'How should configuration classes in src/test/java be annotated so that any declared beans are added to the ApplicationContext in tests?', 'Boot Testing', '@TestConfiguration can be used on an inner class of a test to customize the primary configuration. When placed on a top-level class, @TestConfiguration indicates that classes in src/test/java should not be picked up by scanning. You can then import that class.'),
(11, 'Which of the following are limitations of CGLIB Proxies?', 'Container', 'Spring AOP can also use CGLIB proxies. This is necessary to proxy classes rather than interfaces. Limitations of CGLIB proxies are: Requires the class of the proxied object to be nonfinal. Subclasses cannot be created from final classes. Requires methods in the proxied object to be nonfinal. Final methods cannot be overridden. Does not support self-invocations. Self-invocation is where one method of the object invokes another method on the same object. Requires a third-party library. Not built into the Java language and thus require a library. The CGLIB library has been Included into Spring, so when using the Spring framework, no additional library is required.'),
(12, 'Where can the @Lazy annotation be placed to cause Spring beans to be instantiated lazily?', 'Container', 'Methods annotated with the @Bean annotation. Bean will be lazy or not as specified by the boolean parameter to the @Lazy annotation Spring Professional Practice Questions 70 (default value is true). Classes annotated with the @Configuration annotation. All beans declared in the configuration class will be lazy or not as specified by the boolean parameter to the @Lazy annotation (default value is true). Classes annotated with @Component or any related stereotype annotation. The bean created from the component class will be lazy or not as specified by the boolean parameter to the @Lazy annotation (default value is true).'),
(13, 'Which of the following methods in JdbcTemplate are recommended for read only operations?', 'JDBC', 'query and queryForList method are recommended for read only operations.'),
(14, 'JdbcTemplate is an example of the ______ design pattern.', 'JDBC', 'The name JdbcTemplate derives from the design pattern Template Design Pattern.'),
(15, 'Which of the following JPA repository method names are valid and able to generate a Query?', 'Spring Data JPA', '“findAgeLessThan is invalid because it does not contain the word “”By”” (i.e. findByAgeLessThan would be correct)'),
(16, 'Which of these annotation is used for specifying a query to be used with a Spring Data JPA Repository method?', 'Spring Data JPA', '@Query is the name of the annotation.'),
(17, 'Which annotation can be used to have the request body read and deserialized?', 'MVC', E'“@JsonDeserialize is not an annotation in Spring. \n@RequestMapping is used to configure controllers and their handler methods. \n@RequestDeserialize does not exist. \n@RequestBody is used for access to the HTTP request body. Body content is converted to the “'),
(18, 'In Spring MVC, a controller method (inside a class annotated with @Controller) annotated with @RequestMapping may have the return type _______.', 'MVC', '“In Spring MVC, controller methods return type needs to be mapped to a view in order to be valid. Returned String is a view name, whereas void means that a ServletResponse argument has been modified to contain this view or similar. Float and int cannot, however, be mapped to a view.'),
(19, 'By default, Spring provides HttpMessageConverter for the following message types.', 'REST', E'here are many implementations of this interface that performs specific conversions. A few \nExamples are: \nAtomFeedHttpMessageConverter - Converts to/ from Atom feeds. \nByteArrayHttpMessageConverter - Converts to/ from byte arrays. \nFormHttpMessageConverter - Converts to/from HTML forms. \nJaxb2RootElementHttpMessageConverter - Reads classes annotated with the JAXB2 annotations @XmlRootElement and @XmlType and writes classes annotated with @XmlRootElement. \nMappingJackson2HttpMessageConverter - Converts to/from JSON using Jackson 2.x.'),
(20, 'Which of the following statements are true regarding the RestTemplate class?', 'REST', E'ForEntity methods return ResponseEntity objects. These contain the response status code as well as the object in the payload. \nObjectFactory is not used as an argument in any method of RestTemplate. \nForObject methods do not return the HTTP status code. put and delete methods return void.'),
(21, '@EnableGlobalMethodSecurity is annotation used in Spring Security to secure which layer?', 'Security', '“From version 2.0 onwards Spring Security has improved support substantially for adding security to your service layer methods. It provides support for JSR-250 annotation security as well as the framework’s original @Secured annotation. From 3.0 you can also make use of new expression-based annotations.'),
(22, 'In Spring Security ___________comes after _______________?', 'Security', 'Authentication is process of validating the user who he claims to be. Once the person is authenticated, he is allowed to perform certain actions based on his role, which is authorization.'),
(23, 'In a spring test, which annotation can be used to mock a user?', 'Testing', '@WithMockUser is the most commonly used way of mocking a user in tests. Others possibilities are using the annotations @WithUserDetails, @WithAnonymousUser or @WithSecurityContext.'),
(24, 'Using ________ makes it easier to mock classes in tests', 'Testing', 'Java interfaces are useful in tests, because they can easily be replaced with mocks or stubs in tests.'),
(25, 'Which is the most restrictive database system isolation level?', 'Transaction', 'SERIALIZABLE isolation level is the most restrictive of all isolation levels. Transactions are executed with locking at all levels (read, range and write locking) so they appear as if they were executed in a serialized way. This leads to a scenario where none of the issues mentioned above may occur, but in the other way we don’t allow transaction concurrency and consequently introduce a performance penalty.'),
(26, 'Which is the annotation where transactions configuration properties such as isolation, propagation and rollbackFor can be configured?', 'Transaction', '@Transactional is the main annotation used for declarative transactional management. It has all of these attributes.'),
(27, 'Which of the following Spring MVCrelated information types are collected in metrics by Spring Boot Actuator by default?', 'Full Length Practice Test', E'By default, Spring MVC-related metrics are tagged with the following information: \n• exception - Simple class name of any exception that was thrown while handling the request \n• method - Request’ s method (for example, GET or POST) \n• outcome - Request’s outcome based on the status code of the response. 1xx is INFORMATIONAL, 2xx is SUCCESS, 3xx is REDIRECTION, 4xx CLIENT_ERROR, and 5xx is SERVER_ERROR \n• status - Response’s HTTP status code (for example, 200 or 500) \n• uri - Requests URI template prior to variable substitution, if possible (for example, /api/person/{id})'),
(28, 'What do SpEL expressions starting with # reference?', 'Full Length Practice Test', E'A Spring bean is referenced using its name prefixed with @ in SpEL. Chains of property references can be accessed using the period character. \n• Example accessing property on Spring bean: @mySuperComponent.injectedValue /n• Example invoking method on Spring bean: @mySuperComponent.toString()'),
(29, '__________ is an additional behavior, typically a cross cutting concern, that is to be executed at certain places (at join Points) in a program.', 'AOP', '“Advice: Action taken by an aspect at a particular join point. Different types of advice include around, before, and after advice. (Advice types are discussed later.) Many AOP frameworks, including spring, model an advice as an interceptor and maintain a chain of interceptors around the join point.'),
(30, 'The methods in which of the following classes are intercepted when using the following pointcut expression “within (com.xyz.example..*)”', 'AOP', E'“Two consecutive dots (.) Recursively matches all sub-packages. \nThe pointcut operator within mathces all methods in the specified packages.'),
(31, 'Which of the following types of AOP advice will execute code after the advised method regardless if it completes normally or throws an exception?', 'AOP', '“After (finally) advice will execute regardless if an exception was thrown or not.'),
(32, '“In Spring AOP, two dots (..) Instead of method arguments, like in the example below, matches __________. Example: execution(* transfer(..))”', 'AOP', '“Method arguments (..) signify zero or more arguments.'),
(33, 'Which of the following types of AOP advice can be used to execute code before the advised method?', 'AOP', E'“All types of After advice execute exclusively after the advised method has executed. \nAround advice runs both before and after. Before advice runs only before the method execution.'),
(34, 'Which of the following pointcut expressions allow picking method access specifiers?', 'AOP', '“Execution allows optionally picking the access specifier, for example execution(public * *(..))'),
(35, '_____ complements Spring IoC by focusing on _________', 'AOP', 'Aspects enable the modularization of concerns (such as transaction management) that cut across multiple types and objects. (Such concerns are often termed “crosscutting” concerns in AOP literature.)'),
(36, 'Which of the following types of AOP advice may potentially be used to suppress an exception thrown in the advised method?', 'AOP', E'“Around and after throwing can both suppress exceptions thrown in the advised exception. \nAfter returning advice will only be executed if the advised method has not thrown any exception (thus no exception suppression can happen).'),
(37, 'Which of the following statements are true about Spring AOP?', 'AOP', '“Calls within the same objects will not be intercepted because Spring AOP is implemented using Proxies. When using JDK Proxies, only public and protected interface method calls are intercepted.'),
(38, 'In Spring AOP, ________ can be of multiple types, such as “around”, “before” and “after”.', 'AOP', E'Spring AOP includes the following types of advice: \nBefore advice: Advice that runs before a join point but that does not have the ability to prevent execution flow proceeding to the join point (unless it throws an exception). \nAfter returning advice: Advice to be run after a join point completes normally (for example, if a method returns without throwing an exception). \nAfter throwing advice: Advice to be run if a method exits by throwing an exception. \nAfter (finally) advice: Advice to be run regardless of the means by which a join point exits (normal or exceptional return). \nAround advice: Advice that surrounds a join point such as a method invocation. This is the most powerful kind of advice. Around advice can perform custom behavior before and after the method invocation. It is also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by returning its own return value or throwing an exception.'),
(39, 'What does the abbreviation AOP stand for?', 'AOP', 'Aspect-oriented Programming (AOP) complements Object-oriented Programming (OOP) by providing another way of thinking about program structure. The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect.'),
(40, 'The methods in which of the following classes are intercepted when using the following pointcut expression “within(com. xyz.example.service.*)”', 'AOP', E'Two consecutive dots (.) recursively matches all subpackages. \nThe pointcut operator within metches all methods in the specified packages.'),
(41, 'Which of the following types of AOP advice can be used to prevent execution of the advised method?', 'AOP', E'If the Before advice throws an exception, the join point will not be called. \nBy not calling the ‘proceed()’ on the ProceedingJoinPoint parameter of the Around advice method, the join point (target method) will not be executed. \n‘After returning advice’ and ‘After throwing advice’ are involved only after the execution of the join point.'),
(42, 'What is an aspect in Spring AOP?', 'AOP', E'Join point: a point in the execution of a program such as a method call or exception thrown \nPointcut: An expression that selects one or more join points \nAdvice: code to be executed at each selected join point \nAspect: A module that encapsulates pointcuts and advice \nWeaving: Technique by which aspects are combined with main code.'),
(43, 'Which of the following are endpoints provided by Spring Boot Actuator?', 'Boot Actuator', E'“beans: Lists the Spring beans in the application. \ninfo: Arbitrary application information. \nSpring Boot Actuator, by itself, does not provide metrics visualization.”'),
(44, 'Which of the following are endpoints provided by Spring Boot Actuator?', 'Boot Actuator', E'“mappings: Lists the @RequestMapping paths of the application. \nflyway: Lists applied Flyway database migrations. \nliquibase: Lists applied Liquibase database migrations. \nSpring Boot Actuator does not have an endpoint called users.”'),
(45, 'The property _________ can be used to expose all available actuator endpoints?', 'Boot Actuator', '“The configuration property enabledby-default specifies whether Actuator endpoints should be exposed by default. The property web. exposure.include specifies a list of exposed endpoints (* is a wildcard which selects all endpoints)'),
(46, 'Which of the following endpoints are exposed over HTTP by default?', 'Boot Actuator', 'By default, only the endpoints health and info are exposed via HTTP.'),
(47, 'How can the Health Indicator status severity order be changed?', 'Boot Actuator', '“The @Ordered and @Primary annotations are used to change the order in which Spring beans are instantiated.'),
(48, '_____________ is a Health Indicator Status provided in Spring Boot Actuator?', 'Boot Actuator', '“UP, DOWN and UNKNOWN are Health Indicator Statuses provided and used by Spring Boot Actuator by default.'),
(49, 'What is measuring different aspects of the application for determining the performance of the application at different points in time, under different conditions?', 'Boot Actuator', '“A software metric is a standard of measure of a degree to which a software system or process possesses some property. Even if a metric is not a measurement (metrics are functions, while measurements are the numbers obtained by the application of metrics), often the two terms are used as synonyms.'),
(50, 'Which of the following are reasons to use a 3rd party external monitoring system?', 'Boot Actuator', E'Monitoring of JVM metrics is already provided by Spring Boot Actuator. Endpoints for monitoring are already exposed over the network using the JMX or HTTP protocol by Spring Boot Actuator. \nLimitations of Spring Boot Actuator include monitoring multiple applications (since each runs its own instance of Actuator). Other reasons for using 3rd party external monitoring systems include: \nRetain monitoring data over time. \nThis gives several subsequent opportunities, some of which are listed below. \nAllow for querying monitoring data. \nAllow for visualization of monitoring data. \nEnable alerting based on monitoring data. \nAllow for analysis of monitoring data to find trends and to discover anomalies.'),
(51, '_________ is an endpoint exposed by Spring Boot Actuator by default?', 'Boot Actuator', 'By default, Spring Boot Actuator exposes the endpoints health and info.'),
(52, 'Which of the following can be used to monitor a Spring Boot application?', 'Boot Actuator', 'One of the purposes of Actuator is to monitor Spring Boot Applications.'),
(53, 'How can auditing be enabled for Spring Boot Actuator?', 'Boot Actuator', E'Once Spring Security is in play, Spring Boot Actuator has a flexible audit framework that publishes events (by default, “authentication success”, “failure” and “access denied” exceptions). This feature can be very useful for reporting and for implementing a lock-out policy based on authentication failures. \nAuditing can be enabled by providing a bean of type AuditEventRepository in your applicationâ€™s configuration. For convenience, Spring Boot offers an InMemoryAuditEventRepository. InMemoryAuditEventRepository has limited capabilities and we recommend using it only for development environments. For production environments, consider creating your own alternative AuditEventRepository implementation. \nThe @EnableAuditing does not exist. \nConfiguration Properties relating to actuator are all under the key “”management””. For example: management.auditevents.enabled = true (default).'),
(54, 'Which of the following are endpoints provided by Spring Boot Actuator?', 'Boot Actuator', E'“shutdown: Shutdown of the application. \nenv: Lists properties from the Spring ConfigurableEnvironment. \nloggers: Allows for viewing and modification of the application’s log configuration. \nThe endpoint stacktrace does not exist.”'),
(55, 'Which of the following endpoints are exposed over JMX by default?', 'Boot Actuator', 'All Actuator endpoints are exposed on JMX by default.'),
(56, 'What does HTTP Tracing mean in the context of Spring Boot Actuator?', 'Boot Actuator', E'HTTP Tracing can be enabled by providing a bean of type HttpTraceRepository in your application’s configuration. For production environments, use of a production-ready tracing or observability solution, such as Zipkin or Spring Cloud Sleuth, is recommended. Alternatively, create your own HttpTraceRepository that meets your needs. \nThe httptrace endpoint can be used to obtain information about the request-response exchanges that are stored in the HttpTraceRepository.'),
(57, 'Which of the following affect which packages get component scanned?', 'Boot AutoConfig', E'@ComponentScan.basePackages specifies the packages to be scanned as a String. basePackageClasses is the type-safe alternative to this (scans the package that each class is in). \nSpringBootApplication provides alias fields for both of these methods.'),
(58, 'In Spring Boot, which of the following ways can be used to customize an autoconfiguration class provided in a Spring starter?', 'Boot AutoConfig', E'The simplest way to customize Spring auto-configuration is by changing any property values used by the related beans. \nThe next option is to create a spring bean to replace a bean created by the auto-configuration. To replace the auto-configuration bean, the new bean needs to have a matching type and/or name(depending on the @Conditional annotation(s)annotating the bean method in the autoconfiguration). \nNote that in order to be able to override bean definitions using beans with the same name as the original bean, the following application property needs to be set to true in the Spring \nBoot application: spring.main.allow-beandefinition-overriding=true \nAnother option is to disable one or more auto-configuration classes altogether. This can be accomplished either in the @EnableAutoConfiguration annotation, by specifying the class(es) or fully qualified class name(s), or by using the spring.autoconfigure.exclude property with one or more fully qualified class name(s). Removing the class is not recommended and usually not possible if the class is provided in a starter without removing the entire starter (which will remove many of the needed classes).'),
(59, 'Which of the following are uses for the spring.factories file?', 'Boot AutoConfig', E'The spring.factories file can be used to: \nRegister application event listeners regardless of how the Spring Boot application is created \n(configured). \nImplement a class that inherits from SpringApplicationEvent and register it in the spring.factories file. \nLocate auto-configuration candidates in, for instance, your own starter module. Register a filter to limit the auto-configuration classes considered. \nSee AutoConfigurationImportFilter. \nActivate application listeners that creates a file containing the application process id and/or creates file(s) containing the port number(s) used by the running web server (if any). \nThese listeners, ApplicationPidFileWriter and WebServerPortFileWriter, both implement the ApplicationListener interface. Register failure analyzers. \nFailure analyzers implement the FailureAnalyzer interface and can be registered in the spring.factories file. \nCustomize the environment or application context prior to the Spring Boot application has started up. Classes that implementing the ApplicationListener, ApplicationContextListener or the EnvironmentPostProcessor interfaces may be registered in the spring.factories file. Register the availability of view template providers. See the TemplateAvailabilityProvider interface.'),
(60, 'Which of the following affect which packages get component scanned?', 'Boot AutoConfig', E'“@ComponentScan.basePackages specifies the packages to be scanned as a String. basePackageClasses is the type-safe alternative to this (scans the package that each class is in). SpringBootApplication provides alias fields for both of these methods.'),
(61, 'In Spring Boot, which of the following ways can be used to customize an autoconfiguration class provided in a Spring starter?', 'Boot AutoConfig', E'The simplest way to customize Spring auto-configuration is by changing any property values used by the related beans. \nThe next option is to create a Spring bean to replace a bean created by the auto-configuration. To replace the auto-configuration bean, the new bean needs to have a matching type and/ or name (depending on the @Conditional annotation(s) annotating the bean method in the auto- configuration). Note that in order to be able to override bean definitions using beans with the same name as the original bean, the following application property needs to be set to true in the Spring \nBoot application: spring.main.allow-beandefinition-overriding=true \nAnother option is to disable one or more auto-configuration classes altogether. This can be accomplished either in the @EnableAutoConfiguration annotation, by specifying the class(es) or fully qualified class name(s), or by using the spring.autoconfigure.exclude property with one or more fully qualified class name(s). Removing the class is not recommended and usually not possible if the class is provided in a starter without removing the entire starter (which will remove many of the needed classes).”'),
(62, 'Spring ______ is referred to as opinionated, using standard industry guidelines as sensible defaults.', 'Boot AutoConfig', 'Spring Boot is Opinionated and uses defaults to enable a quick startup for new projects.'),
(63, 'In Spring Boot, how can specific autoconfiguration classes be disabled?', 'Boot AutoConfig', 'If the class is not on the classpath, you can use the excludeName attribute of the annotation and specify the fully qualified name instead. If you prefer to use @EnableAutoConfiguration rather than @SpringBootApplication, exclude and excludeName are also available. Finally, you can also control the list of auto-configuration classes to exclude by using the spring.autoconfigure.exclude property.'),
(64, 'Which of the following annotations is used on custom Spring Boot Autoconfiguration classes?', 'Boot AutoConfig', E'Custom auto-configuration classes are simply @Configuration classes using @ConditionalOn* annotations to select the situation in which the Configuration should come into effect. The other annotations don’t exist.'),
(65, 'Spring Boot provides a default configuration for the log implementation _______ ?', 'Boot AutoConfig', 'Spring Boot uses Commons Logging for all internal logging but leaves the underlying log implementation open. Default configurations are provided for Java Util Logging, Log4J2, and Logback. In each case, loggers are pre-configured to use console output with optional file output also available.'),
(66, 'The annotation @SpringBootApplication is a shorthand for the following annotations.', 'Boot AutoConfig', E'A single @SpringBootApplication annotation can be used to enable those three features, that is: \n@EnableAutoConfiguration: enable Spring Boot’s auto-configuration mechanism \n@ComponentScan: enable @Component scan on the package where the application is located (see the best practices) \n@Configuration: allow to register extra beans in the context or import additional configuration classes'),
(67, 'Which of the following are condition annotations used by Spring Boot for autoconfiguration?', 'Boot AutoConfig', E'Here are all of the possible autoconfiguration condition annotations: \n@ConditionalOnClass - Presence of class on classpath. \n@ConditionalOnMissingClass - Absence of class on classpath. \n@ConditionalOnBean - Presence of Spring bean or bean type (class). \n@ConditionalOnMissingBean - Absence of Spring bean or bean type (class). \n@ConditionalOnProperty - Presence of Spring environment property. \n@ConditionalOnResource - Presence of resource such as file. \n@ConditionalOnWebApplication - If the application is considered to be a web application, that is uses the Spring WebApplicationContext, defines a session scope or has a StandardServletEnvironment. \n@ConditionalOnNotWebApplication - If the application is not considered to be a web application. \n@ConditionalOnExpression - Bean or configuration active based on the evaluation of a SpEL expression. \n@ConditionalOnCloudPlatform - If specified cloud platform, Cloud Foundry, Heroku or SAP, is active. \n@ConditionalOnEnabledEndpoint - Specified endpoint is enabled. @ConditionalOnEnabledHealthIndicator - Named health indicator is enabled. \n @ConditionalOnEnabledInfoContributor - Named info contributor is enabled. \n@ConditionalOnEnabledResourceChain - Spring resource handling chain is enabled. \n@ConditionalOnInitializedRestarter - Spring DevTools RestartInitializer has been applied with non-null URLs. @ConditionalOnJava - Presence of a JVM of a certain version or within Condition Annotation Condition Factor a version range. \n@ConditionalOnJndi - Availability of JNDI InitialContext and specified JNDI locations exist. \n@ConditionalOnManagementPort - Spring Boot Actuator management port is either: Different from server port, same as server port or disabled. \n@ConditionalOnRepositoryType - Specified type of Spring Data repository has been enabled. \n@ConditionalOnSingleCandidate - Spring bean of specified type (class) contained in bean factory and single candidate can be determined.'),
(68, 'In Spring Boot, in order to use YAML to configure application properties, you must add ________.', 'Boot AutoConfig', E'The SpringApplication class automatically supports YAML as an alternative to properties whenever you have the SnakeYAML library on your classpath. \nIf you use “Starters” SnakeYAML is automatically provided by spring-boot-starter.'),
(69, 'Spring MVC Auto-configuration adds the following on top of Spring’s defaults?', 'Boot AutoConfig', E'The auto-configuration adds the following features on top of Spring’s defaults: \nInclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans. \nSupport for serving static resources, including support for WebJars. \nAutomatic registration of Converter, GenericConverter, and Formatter beans. \nSupport for HttpMessageConverters. Automatic registration of MessageCodesResolver.. \nStatic index.html support. \nCustom Favicon support. \nAutomatic use of a ConfigurableWebBindingInitializer bean.'),
(70, 'Which of the following affect what Spring Boot auto-configures?', 'Boot AutoConfig', E'Spring Boot auto-configuration attempts to automatically configure your Spring application based on the jar dependencies that you have added. For example, if HSQLDB is on your classpath, and you have not manually configured any database connection beans, then Spring Boot auto-configures an in-memory database. \nSome explicitly declared beans will be used based on their name (e.g. a bean named “”transactionManager”” will be used as the application’s transaction manager).');




insert into "springTestAppDB".answers (answer, question_id, correct_answer) values
('Security', 1, '1'), ('File access', 1, '0'), ('Parallelization', 1, '0'), ('Logging', 1, '1'),
('and', 2, '0'), ('or', 2, '0'), ('&&', 2, '1'), ('||', 2, '1'),
('HTTP Request response time', 3, '1'), ('Memory usage', 3, '1'), ('Garbage collection statistics', 3, '1'), ('Number of user sessions', 3, '0'),
('ConnectionHealthIndicator', 4, '0'), ('DiskSpaceHealthIndicator', 4, '1'), ('ApplicationHealthIndicator', 4, '0'), ('ElasticsearchHealthIndicator', 4, '1'),
('ContentNegotiatingViewResolver bean', 5, '1'), ('Use of ConfigurableWebBindingInitializer', 5, '1'), ('Favicon support', 5, '1'), ('Registration of MessageCodesResolver', 5, '1'),
('ClassPathXmlApplicationContext', 6, '0'), ('AnnotationConfigApplicationContext', 6, '1'), ('FileSystemXmlApplicationContext', 6, '0'), ('AnnotationConfigServletWebServerApplication
Context', 6, '0'),
('configuration.properties', 7, '0'), ('application.properties', 7, '1'), ('config.txt', 7, '0'), ('settings.properties', 7, '0'),
('ApplicationRunner', 8, '1'), ('SpringRunner', 8, '0'), ('CommandLineRunner', 8, '1'), ('StartupRunner', 8, '0'),
('Mockito', 9, '1'), ('JsonPath', 9, '1'), ('Cucumber', 9, '0'), ('TestNG', 9, '0'),
('@Configuration', 10, '0'), ('@TestConfiguration', 10, '1'), ('@ConfigurationProperties', 10, '0'), ('@TestContext ', 10, '0'),
('Requires a third-party library', 11, '1'), ('Requires the class to be non-final', 11, '1'), ('Requires the methods to be non-final', 11, '1'), ('Requires an interface to be declared', 11, '0'),
('Methods annotated with @Bean', 12, '1'), ('Classes annotated with @Configuration', 12, '1'), ('Classes annotated with @Component or another stereotype annotation', 12, '1'), ('Test Classes', 12, '1'),
('query', 13, '1'), ('update', 13, '0'), ('execute', 13, '0'),('queryForList', 13, '1'),
('Factory', 14, '0'), ('Adapter', 14, '0'), ('Decorator', 14, '0'), ('Template', 14, '1'),
('findByStartDateBetween', 15, '1'), ('findPeopleDistinctByLastnameOrFirstname', 15, '1'), ('findByFirstname', 15, '1'), ('findAgeLessThan', 15, '0'),
('@SqlQuery', 16, '0'), ('@DataQuery', 16, '0'), ('@JpaQuery', 16, '0'), ('@Query', 16, '1'),
('@JsonDeserialize', 17, '0'), ('@RequestBody', 17, '1'), ('@RequestDeserialize', 17, '0'), ('@RequestMapping', 17, '0'),
('String', 18, '1'), ('int', 18, '0'), ('void', 18, '1'), ('double', 18, '0'),
('Byte arrays', 19, '1'), ('SOAP', 19, '0'), ('JAXB', 19, '1'), ('JSON', 19, '1'),
('getForEntity returns domain entities.', 20, '0'), ('getForObject takes an ObjectFactory as an argument.', 20, '0'), ('When using postForObject, it is impossible to check the HTTP response code.', 20, '1'), ('The put and delete methods have a void return type.', 20, '1'),
('Controller layer', 21, '0'), ('DAO layer', 21, '0'), ('Service layer', 21, '1'), ('Web layer', 21, '0'),
('Authentication, Authorization', 22, '0'), ('Principal, Authentication', 22, '0'), ('Authorization, Authentication', 22, '1'), ('Principal, Authorization', 22, '0'),
('@Mock', 23, '0'), ('@MockBean', 23, '0'), ('@WithMockUser', 23, '1'), ('@MockAuthentication', 23, '0'),
('Spring AOP', 24, '0'), ('The template design pattern', 24, '0'), ('Spring profiles', 24, '0'), ('Java interfaces', 24, '1'),
('READ_UNCOMMITED', 25, '0'), ('REPEATABLE_READ', 25, '0'), ('SERIALIZABLE', 25, '1'), ('READ_COMMITED', 25, '0'),
('@EnableTransaction', 26, '0'), ('@Transaction', 26, '0'), ('@TransactionConfiguration', 26, '0'), ('@Transactional', 26, '1'),
('Requesting user', 27, '0'), ('HTTP method', 27, '1'), ('Accessed endpoint', 27, '1'), ('Response status', 27, '1'),
('Properties in the application environment', 28, '0'), ('Spring Beans', 28, '1'), ('Literal Values', 28, '0'), ('JVM Properties', 28, '0'),
('Advice', 29, '1'), ('Aspect', 29, '0'), ('Weaving', 29, '0'), ('Pointcut', 29, '0'),
('com.xyz.example.rest.http.MyController', 30, '1'), ('com.xyz.example.service.MyService', 30, '1'), ('com.xyz.security.SecurityConfig', 30, '0'), ('com.xyz.example.Application', 30, '1'),
('@AfterReturning', 31, '0'), ('@AfterThrowing', 31, '0'), ('@Around', 31, '0'), ('@After', 31, '1'),
('No arguments', 32, '0'), ('One or more arguments', 32, '0'), ('Multiple arguments', 32, '0'), ('Any number of arguments', 32, '1'),
('@AfterThrowing', 33, '0'), ('@AfterReturning', 33, '0'), ('@Before', 33, '1'), ('@Around', 33, '1'),
('target', 34, '0'), ('bean', 34, '0'), ('execution', 34, '1'), ('within', 34, '0'),
('Spring AOP, Inversion of Control', 35, '0'), ('JPA, automated testing', 35, '0'), ('Spring AOP, crosscutting concerns', 35, '1'), ('Spring Actuator, Reactive Programming', 35, '0'),
('@Before', 36, '0'), ('@Around', 36, '1'), ('@AfterReturning', 36, '0'), ('@AfterThrowing', 36, '1'),
('Calls within the same object can be intercepted.', 37, '1'), ('When using CGLIB proxies, public method calls can be intercepted', 37, '1'), ('When using JDK Proxies, only public and protected interface method calls can be intercepted', 37, '0'), ('When using CGLIB proxies, private method calls can be intercepted', 37, '0'),
('Advice', 38, '1'), ('Join point', 38, '0'), ('Aspect', 38, '0'), ('Pointcut', 38, '0'),
('Access Operational Program', 39, '0'), ('Aspect Oriented Programming', 39, '1'), ('Application Oriented Programming', 39, '0'), ('Approved Operating Program', 39, '0'),
('com.xyz.example.rest.http.MyController', 40, '1'), ('com.xyz.example.service.MyService', 40, '1'), ('com.xyz.service.payment.PaymentService', 40, '0'), ('com.xyz.example.Application', 40, '1'),
('@Before', 41, '1'), ('@AfterThrowing', 41, '0'), ('@After', 41, '0'), ('@Around', 41, '1'),
('An expression that selects on or more join point', 42, '0'), ('Technique by which aspect are combined with main code.', 42, '0'), ('Code to be executed at each selected join point', 42, '0'), ('A module that encapsulate pointcuts and advice', 42, '1'),
('management', 43, '0'), ('beans', 43, '1'), ('graph', 43, '0'), ('info', 43, '1'),
('mappings', 44, '1'), ('users', 44, '0'), ('flyway', 44, '1'), ('liquibase', 44, '1'),
('management.endpoints.enable=true', 45, '0'), ('management.endpoints.enabled-bydefault=true', 45, '1'), ('management.endpoints.web.include=*', 45, '0'), ('management.endpoints.web.exposure.include=*', 45, '1'),
('shutdown', 46, '0'), ('info', 46, '1'), ('health', 46, '1'), ('beans', 46, '0'),
('Using the @Ordered annotation', 47, '0'), ('Using the @Primary annotation', 47, '0'), ('Using the property management.health.status. order', 47, '1'), ('It cannot be changed.', 47, '0'),
('UP', 48, '1'), ('NRESPONSIVE', 48, '0'), ('DOWN', 48, '1'), ('UNKNOWN', 48, '1'),
('Metrics', 49, '1'), ('Management', 49, '0'), ('Auditing', 49, '0'), ('Monitoring', 49, '0'),
('Monitoring multiple applications at once', 50, '1'), ('Visualization of monitoring data', 50, '1'), ('Monitoring of JVM metrics', 50, '0'), ('Exposing endpoints for monitoring over a network', 50, '0'),
('beans', 51, '0'), ('info', 51, '1'), ('metrics', 51, '0'), ('health', 51, '1'),
('Spring Boot Devtools', 52, '0'), ('Spring Boot Initializr', 52, '0'), ('Spring Boot Starter', 52, '0'), ('Spring Boot Actuator', 52, '1'),
('The @EnableAuditing annotation', 53, '0'), ('Setting the property actuator.audit. enabled=true', 53, '0'), ('SDeclaring a bean of type AuditEventRepository', 53, '1'), ('None of the above.', 53, '0'),
('shutdown', 54, '1'), ('env', 54, '1'), ('stacktrace', 54, '0'), ('Loggers', 54, '1'),
('shutdown', 55, '1'), ('beans', 55, '1'), ('health', 55, '1'), ('info', 55, '1'),
('Logging all actions initiated via HTTP request using the TRACE level', 56, '0'), ('Logging http request and requester IP address', 56, '0'), ('Logging failed HTTP requests', 56, '0'), ('Logging HTTP requests and responses.', 56, '1'),
('Location of @ComponentScan annotated class', 57, '1'), ('basePackageClasses attribute of the @ComponentScan annotation', 57, '1'), ('scanBasePackageClasses attribute of @SpringBootApplication class', 57, '1'), ('Configuration property spring.scan.location', 57, '0'),
('Override the bean definition (overriding needs to be enabled first)', 58, '1'), ('Remove the class', 58, '0'), ('Annotate using @Disabled', 58, '0'), ('It cannot be customized.', 58, '0'),
('Register application event listeners', 59, '1'), ('Register Application-specific Factory classes', 59, '0'), ('Locate auto-configuration candidates', 59, '1'), ('Bean overriding', 59, '0'),
('<context:component-scan> in XML Configuration', 60, '1'), ('Configuration property spring.scan.location', 60, '0'), ('scanBasePackages attribute of @SpringBootApplication class', 60, '1'), ('location field of ComponentScanner bean', 60, '0'),
('Override it in a @Configuration', 61, '0'), ('Override the bean definition (overriding needs to be enabled first)', 61, '1'), ('Make sure the condition specified by its @ConditionalOn* annotation is false', 61, '1'), ('Exclude it in the @EnableAutoConfiguration annotation', 61, '1'),
('Boot', 62, '1'), ('Security', 62, '0'), ('Rest', 62, '0'), ('Web', 62, '0'),
('“exclude” attribute of the @SpringBootApplication annotation', 63, '1'), ('@Disabled annotationm on the classes', 63, '0'), ('Adding explicit configuration classes', 63, '1'), ('@ManualConfiguration annotation', 63, '0'),
('@ConfigurationCondition', 64, '0'), ('@AutoConfiguration', 64, '0'), ('@ConditionalConfiguration', 64, '0'), ('@Configuration', 64, '1'),
('Commons Logging', 65, '0'), ('Log4J2', 65, '1'), ('SLF4J', 65, '0'), ('Logback', 65, '1'),
('@Configuration', 66, '1'), ('@EnableAutoConfiguration', 66, '1'), ('@Application', 66, '0'), ('@ComponentScan', 66, '1'),
('@ConditionalOnClass', 67, '1'), ('@ConditionalOnMissingBean', 67, '1'), ('@ConditionalOnMVC', 67, '0'), ('@ConditionalOnJava', 67, '1'),
('SnakeYAML library to the classpath', 68, '0'), ('@EnableYaml annotation', 68, '0'), ('YamlPropertySourceLoader bean', 68, '0'), ('Nothing, since it is available by default', 68, '1'),
('ContentNegotiatingViewResolver bean', 69, '1'), ('Use of ConfigurableWebBindingInitializer', 69, '1'), ('Favicon support', 69, '1'), ('Registration of MessageCodesResolver', 69, '1'),
('System performance', 70, '0'), ('Declared Beans', 70, '1'), ('Other running Spring Applications', 70, '0'), ('Dependencies in Classpath', 70, '1');